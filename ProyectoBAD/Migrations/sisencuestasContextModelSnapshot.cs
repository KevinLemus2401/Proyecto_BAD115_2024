// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoBAD.Models;

#nullable disable

namespace ProyectoBAD.Migrations
{
    [DbContext(typeof(sisencuestasContext))]
    partial class sisencuestasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProyectoBAD.Models.Encuestado", b =>
                {
                    b.Property<int>("IdEncuestado")
                        .HasColumnType("int")
                        .HasColumnName("ID_ENCUESTADO");

                    b.Property<string>("EmailEncuestado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL_ENCUESTADO");

                    b.Property<DateTime>("FechaNacEncuesta")
                        .HasColumnType("datetime")
                        .HasColumnName("FECHA_NAC_ENCUESTA");

                    b.Property<string>("GenEncuestado")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("GEN_ENCUESTADO")
                        .IsFixedLength();

                    b.HasKey("IdEncuestado");

                    b.ToTable("ENCUESTADO", (string)null);
                });

            modelBuilder.Entity("ProyectoBAD.Models.Encuestum", b =>
                {
                    b.Property<int>("IdEncuesta")
                        .HasColumnType("int")
                        .HasColumnName("ID_ENCUESTA");

                    b.Property<bool?>("EstadoEncuesta")
                        .HasColumnType("bit")
                        .HasColumnName("ESTADO_ENCUESTA");

                    b.Property<DateTime>("FechaEncuesta")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("FECHA_ENCUESTA");

                    b.Property<string>("GrupometaEncuesta")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("GRUPOMETA_ENCUESTA");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("IndicacionesEncuesta")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("INDICACIONES_ENCUESTA");

                    b.Property<string>("ObjetivoEncuesta")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("OBJETIVO_ENCUESTA");

                    b.Property<string>("TituloEncuesta")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TITULO_ENCUESTA");

                    b.HasKey("IdEncuesta");

                    b.HasIndex(new[] { "IdUsuario" }, "USUARIO_ENCUESTA_FK");

                    b.ToTable("ENCUESTA", (string)null);
                });

            modelBuilder.Entity("ProyectoBAD.Models.Opcionpreguntum", b =>
                {
                    b.Property<int>("OpcionId")
                        .HasColumnType("int")
                        .HasColumnName("OPCION_ID");

                    b.Property<string>("DescripcionOpcion")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("DESCRIPCION_OPCION");

                    b.Property<bool?>("EstadoOpcion")
                        .HasColumnType("bit")
                        .HasColumnName("ESTADO_OPCION");

                    b.Property<int?>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("ID_PREGUNTA");

                    b.Property<int?>("OrdenOpcion")
                        .HasColumnType("int")
                        .HasColumnName("ORDEN_OPCION");

                    b.Property<string>("ValorOpcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("VALOR_OPCION");

                    b.HasKey("OpcionId");

                    b.HasIndex(new[] { "IdPregunta" }, "REL_PREGUNTA_OPCIONPREGUNTA_FK");

                    b.ToTable("OPCIONPREGUNTA", (string)null);
                });

            modelBuilder.Entity("ProyectoBAD.Models.Preguntum", b =>
                {
                    b.Property<int>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("ID_PREGUNTA");

                    b.Property<string>("DescripcionPregunta")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("DESCRIPCION_PREGUNTA");

                    b.Property<int?>("IdEncuesta")
                        .HasColumnType("int")
                        .HasColumnName("ID_ENCUESTA");

                    b.Property<int>("OrdenPregunta")
                        .HasColumnType("int")
                        .HasColumnName("ORDEN_PREGUNTA");

                    b.Property<bool?>("RequeridaPregunta")
                        .HasColumnType("bit")
                        .HasColumnName("REQUERIDA_PREGUNTA");

                    b.Property<int?>("TipoPreguntaId")
                        .HasColumnType("int")
                        .HasColumnName("TIPO_PREGUNTA_ID");

                    b.HasKey("IdPregunta");

                    b.HasIndex(new[] { "IdEncuesta" }, "REL_ENCUESTA_PREGUNTA_FK");

                    b.HasIndex(new[] { "TipoPreguntaId" }, "REL_TIPOPREGUNTA_PREGUNTA_FK");

                    b.ToTable("PREGUNTA", (string)null);
                });

            modelBuilder.Entity("ProyectoBAD.Models.Respuestum", b =>
                {
                    b.Property<int>("RespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("RESPUESTA_ID");

                    b.Property<byte[]>("FechaRespuesta")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("FECHA_RESPUESTA");

                    b.Property<int?>("IdEncuesta")
                        .HasColumnType("int")
                        .HasColumnName("ID_ENCUESTA");

                    b.Property<int?>("IdEncuestado")
                        .HasColumnType("int")
                        .HasColumnName("ID_ENCUESTADO");

                    b.Property<int?>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("ID_PREGUNTA");

                    b.Property<int?>("OpcionId")
                        .HasColumnType("int")
                        .HasColumnName("OPCION_ID");

                    b.Property<string>("TextoRespuesta")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TEXTO_RESPUESTA");

                    b.HasKey("RespuestaId");

                    b.HasIndex(new[] { "IdEncuesta" }, "RELATIONSHIP_7_FK");

                    b.HasIndex(new[] { "IdEncuestado" }, "REL_ENCUESTADO_RESPUESTA_FK");

                    b.HasIndex(new[] { "OpcionId" }, "REL_RESPUESTA_OPCIONPREGUNTA_FK");

                    b.HasIndex(new[] { "IdPregunta" }, "REL_RESPUESTA_PREGUNTA_FK");

                    b.ToTable("RESPUESTA", (string)null);
                });

            modelBuilder.Entity("ProyectoBAD.Models.Tipopreguntum", b =>
                {
                    b.Property<int>("TipoPreguntaId")
                        .HasColumnType("int")
                        .HasColumnName("TIPO_PREGUNTA_ID");

                    b.Property<string>("DescripcionTipoPregunta")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DESCRIPCION_TIPO_PREGUNTA");

                    b.Property<string>("NombreTipoPregunta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_TIPO_PREGUNTA");

                    b.HasKey("TipoPreguntaId");

                    b.ToTable("TIPOPREGUNTA", (string)null);
                });

            modelBuilder.Entity("ProyectoBAD.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL_USUARIO");

                    b.Property<string>("GenUsuario")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("GEN_USUARIO")
                        .IsFixedLength();

                    b.Property<string>("PrimerApellidoUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMER_APELLIDO_USUARIO");

                    b.Property<string>("PrimerNombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMER_NOMBRE_USUARIO");

                    b.Property<string>("SegundoApellidoUsuario")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SEGUNDO_APELLIDO_USUARIO");

                    b.Property<string>("SegundoNombreUsuario")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SEGUNDO_NOMBRE_USUARIO");

                    b.Property<string>("TelefonoUsuario")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("TELEFONO_USUARIO");

                    b.HasKey("IdUsuario");

                    b.ToTable("USUARIO", (string)null);
                });

            modelBuilder.Entity("ProyectoBAD.Models.Encuestum", b =>
                {
                    b.HasOne("ProyectoBAD.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Encuesta")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_ENCUESTA_USUARIO_E_USUARIO");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Opcionpreguntum", b =>
                {
                    b.HasOne("ProyectoBAD.Models.Preguntum", "IdPreguntaNavigation")
                        .WithMany("Opcionpregunta")
                        .HasForeignKey("IdPregunta")
                        .HasConstraintName("FK_OPCIONPR_REL_PREGU_PREGUNTA");

                    b.Navigation("IdPreguntaNavigation");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Preguntum", b =>
                {
                    b.HasOne("ProyectoBAD.Models.Encuestum", "IdEncuestaNavigation")
                        .WithMany("Pregunta")
                        .HasForeignKey("IdEncuesta")
                        .HasConstraintName("FK_PREGUNTA_REL_ENCUE_ENCUESTA");

                    b.HasOne("ProyectoBAD.Models.Tipopreguntum", "TipoPregunta")
                        .WithMany("Pregunta")
                        .HasForeignKey("TipoPreguntaId")
                        .HasConstraintName("FK_PREGUNTA_REL_TIPOP_TIPOPREG");

                    b.Navigation("IdEncuestaNavigation");

                    b.Navigation("TipoPregunta");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Respuestum", b =>
                {
                    b.HasOne("ProyectoBAD.Models.Encuestum", "IdEncuestaNavigation")
                        .WithMany("Respuesta")
                        .HasForeignKey("IdEncuesta")
                        .HasConstraintName("FK_RESPUEST_RELATIONS_ENCUESTA");

                    b.HasOne("ProyectoBAD.Models.Encuestado", "IdEncuestadoNavigation")
                        .WithMany("Respuesta")
                        .HasForeignKey("IdEncuestado")
                        .HasConstraintName("FK_RESPUEST_REL_ENCUE_ENCUESTA");

                    b.HasOne("ProyectoBAD.Models.Preguntum", "IdPreguntaNavigation")
                        .WithMany("Respuesta")
                        .HasForeignKey("IdPregunta")
                        .HasConstraintName("FK_RESPUEST_REL_RESPU_PREGUNTA");

                    b.HasOne("ProyectoBAD.Models.Opcionpreguntum", "Opcion")
                        .WithMany("Respuesta")
                        .HasForeignKey("OpcionId")
                        .HasConstraintName("FK_RESPUEST_REL_RESPU_OPCIONPR");

                    b.Navigation("IdEncuestaNavigation");

                    b.Navigation("IdEncuestadoNavigation");

                    b.Navigation("IdPreguntaNavigation");

                    b.Navigation("Opcion");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Encuestado", b =>
                {
                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Encuestum", b =>
                {
                    b.Navigation("Pregunta");

                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Opcionpreguntum", b =>
                {
                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Preguntum", b =>
                {
                    b.Navigation("Opcionpregunta");

                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Tipopreguntum", b =>
                {
                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("ProyectoBAD.Models.Usuario", b =>
                {
                    b.Navigation("Encuesta");
                });
#pragma warning restore 612, 618
        }
    }
}
